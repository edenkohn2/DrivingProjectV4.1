@page "/login"
@rendermode InteractiveServer
@using APIDrivingProject.Services;
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@using System.Text.Json;

@if (!shouldRender)
{
    <p>מנתב...</p>
}
else
{
    <div class="login-background">
        <div class="login-container">
            <div class="login-card animated fadeInUp">
                <h2 class="login-title">כניסה למערכת</h2>
                <p class="login-subtitle">ברוכים השבים! אנא התחבר לחשבונך.</p>
                <div class="input-group">
                    <label>דוא"ל</label>
                    <InputText @bind-Value="email" class="input-field" placeholder="הכנס את דוא''ל שלך" />
                </div>
                <div class="input-group">
                    <label>סיסמה</label>
                    <InputText @bind-Value="password" type="password" class="input-field" placeholder="הכנס את סיסמתך" />
                </div>
                @if (loginFailed)
                {
                    <div class="error-message">התחברות נכשלה. אנא נסה שוב.</div>
                }
                <button class="login-button" @onclick="HandleLogin">כניסה</button>
            </div>
        </div>
    </div>
}

@if (isRedirecting)
{
    <div class="loading-overlay">
        <div class="spinner"></div>
        <div class="loading-message">מכניסים אותך...</div>
    </div>
}

<style>
    /* אנימציית כניסה */
    @@keyframes fadeInUp {
        from { opacity: 0; transform: translateY(50px); }
        to { opacity: 1; transform: translateY(0); }
    }
    .animated {
        animation-duration: 0.8s;
        animation-fill-mode: both;
    }
    
    /* רקע מינימליסטי */
    .login-background {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: linear-gradient(135deg, #f8f9fa, #e9ecef);
    }
    
    /* מכולת הכרטיס */
    .login-container {
        width: 100%;
        max-width: 400px;
        padding: 20px;
    }
    .login-card {
        background: #ffffff;
        padding: 40px 30px;
        border-radius: 15px;
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
        color: #333;
        text-align: center;
    }
    
    /* כותרות וטקסט */
    .login-title {
        font-size: 2.5rem;
        margin-bottom: 10px;
        color: #333;
    }
    .login-subtitle {
        font-size: 1.1rem;
        color: #666;
        margin-bottom: 30px;
    }
    
    /* קבוצת קלט */
    .input-group {
        margin-bottom: 20px;
        text-align: left;
    }
    .input-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 600;
        font-size: 1rem;
        color: #555;
    }
    .input-field {
        width: 100%;
        padding: 12px 15px;
        font-size: 1rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        background: #f9f9f9;
        color: #333;
        transition: border-color 0.3s ease;
    }
    .input-field::placeholder {
        color: #aaa;
    }
    .input-field:focus {
        outline: none;
        border-color: #007bff;
    }
    
    /* כפתור כניסה מעוצב עם Gradient ואפקטי Hover */
    .login-button {
        width: 100%;
        padding: 15px;
        font-size: 1.2rem;
        font-weight: bold;
        color: #fff;
        background: linear-gradient(135deg, #007bff, #00c6ff);
        border: none;
        border-radius: 50px;
        cursor: pointer;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    .login-button:hover {
        transform: translateY(-3px);
        box-shadow: 0 10px 20px rgba(0, 123, 255, 0.3);
    }
    .login-button:active {
        transform: translateY(0);
    }
    
    /* הודעת שגיאה */
    .error-message {
        color: #ff4d4d;
        font-size: 0.9rem;
        margin-top: 10px;
    }
    
    /* אנימציית הספינר */
    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }
    .spinner {
        width: 60px;
        height: 60px;
        border: 6px solid #f3f3f3;
        border-top: 6px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }
    /* כותרת "מכניסים אותך..." מעוצבת בצורה מטורפת */
    .loading-message {
        font-size: 2.2rem;
        font-weight: bold;
        background: linear-gradient(45deg, #00c6ff, #007bff, #00c6ff);
        background-clip: text;
        -webkit-background-clip: text;
        color: transparent;
        animation: textGlow 2s infinite alternate, fadeInUp 1s ease;
        text-shadow: 0px 0px 15px rgba(0, 123, 255, 0.8);
    }
    @@keyframes textGlow {
        from {
            text-shadow: 0 0 10px #00c6ff, 0 0 20px #007bff, 0 0 30px #00c6ff;
        }
        to {
            text-shadow: 0 0 20px #00c6ff, 0 0 30px #007bff, 0 0 40px #00c6ff;
        }
    }
</style>

@code {
    private string email = "";
    private string password = "";
    private bool loginFailed = false;
    private bool shouldRender = true;
    private bool isRedirecting = false;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            shouldRender = false;
            await RedirectToDashboard();
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            var response = await Http.PostAsJsonAsync("api/users/login", new { email, password });
            if (response.IsSuccessStatusCode)
            {
                var jsonResponse = await response.Content.ReadFromJsonAsync<Dictionary<string, JsonElement>>();
                if (jsonResponse != null && jsonResponse.TryGetValue("person", out var personElement))
                {
                    var userName = $"{personElement.GetProperty("firstName").GetString()} {personElement.GetProperty("lastName").GetString()}";
                    var userId = personElement.GetProperty("personId").GetInt32();
                    var role = personElement.GetProperty("role").GetString();

                    AuthService.SetUser(userName, role, userId);

                    if (AuthService.IsStudent)
                    {
                        try
                        {
                            bool assigned = await Http.GetFromJsonAsync<bool>($"api/Instructors/{userId}/is-assigned");
                            AuthService.SetAssignmentStatus(assigned);
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error checking assignment: {ex.Message}");
                            AuthService.SetAssignmentStatus(false);
                        }
                    }

                    isRedirecting = true;
                    StateHasChanged();
                    await Task.Delay(2000);
                    await RedirectToDashboard();
                }
                else
                {
                    loginFailed = true;
                }
            }
            else
            {
                loginFailed = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during login: {ex}");
            loginFailed = true;
        }
    }

    private async Task RedirectToDashboard()
    {
        await Task.Delay(10);

        if (AuthService.IsStudent)
        {
            if (!AuthService.IsAssigned)
            {
                Navigation.NavigateTo("/settings", true);
                return;
            }
            else
            {
                Navigation.NavigateTo("/student_dashboard", true);
                return;
            }
        }
        else if (AuthService.IsInstructor)
        {
            Navigation.NavigateTo("/teacher_dashboard", true);
        }
        else if (AuthService.IsAdmin)
        {
            Navigation.NavigateTo("/admin_dashboard", true);
        }
    }
}
@page "/request-assignment"
@using DrivingClassLibary.Models;
@using APIDrivingProject.Services;
@inject HttpClient Http
@inject AuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (instructors == null || !instructors.Any())
{
    <p>Loading instructors...</p>
}
else
{
    <h1 style="text-align: center;">Request Assignment</h1>
    <table style="width: 100%; border-collapse: collapse; margin: 20px auto; max-width: 600px;">
        <thead>
            <tr style="background-color: #f2f2f2;">
                <th style="padding: 10px; text-align: left;">Name</th>
                <th style="padding: 10px; text-align: left;">Email</th>
                <th style="padding: 10px; text-align: left;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var instructor in instructors)
            {
                <tr>
                    <td style="padding: 10px;">@instructor.FirstName @instructor.LastName</td>
                    <td style="padding: 10px;">@instructor.Email</td>
                    <td style="padding: 10px;">
                        <button @onclick="() => SendRequest(instructor.InstructorId)" style="padding: 5px 10px;">Send Request</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Instructor> instructors = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Load the list of instructors
            instructors = await Http.GetFromJsonAsync<List<Instructor>>("api/Instructors");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading instructors: {ex.Message}");
        }
    }

    private async Task SendRequest(int instructorId)
    {
        try
        {
            var request = new AssignmentRequestModel
                {
                    StudentId = AuthService.UserId,
                    InstructorId = instructorId
                };

            var response = await Http.PostAsJsonAsync("api/Instructors/request-assignment", request);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Request sent successfully.");
            }
            else
            {
                Console.WriteLine($"Error sending request: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error sending request: {ex.Message}");
        }
    }
}

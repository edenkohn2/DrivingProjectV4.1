@page "/register"
@rendermode InteractiveServer
@inject HttpClient Http
@inject NavigationManager Navigation
@inject AuthService AuthService
@using APIDrivingProject.Services;
@using BlazorDriveApp.Models;
@using DrivingClassLibary.Models;
@using System.Globalization;

@if (!shouldRender)
{
    <p>מנתב...</p>
}
else
{
    <div class="register-background">
        <div class="register-container animated slideIn">
            <h1 class="register-title">Sign Up</h1>
            <p class="register-subtitle">Join us and start learning today!</p>

            <!-- First Name -->
            <div class="input-group">
                <input type="text" placeholder="First Name" @bind="firstName" class="input-field" />
                @if (!isFirstNameValid)
                {
                    <p class="error-message">First name is required.</p>
                }
            </div>
            <!-- Last Name -->
            <div class="input-group">
                <input type="text" placeholder="Last Name" @bind="lastName" class="input-field" />
                @if (!isLastNameValid)
                {
                    <p class="error-message">Last name is required.</p>
                }
            </div>
            <!-- Email -->
            <div class="input-group">
                <input type="email" placeholder="Email" @bind="email" class="input-field" />
                @if (!isEmailUnique)
                {
                    <p class="error-message">Email is already in use.</p>
                }
                @if (!isValidEmail)
                {
                    <p class="error-message">Please enter a valid email.</p>
                }
            </div>
            <!-- Password -->
            <div class="input-group">
                <input type="password" placeholder="Password" @bind="password" class="input-field" />
                @if (!isPasswordValid)
                {
                    <p class="error-message">Password must be at least 8 characters long.</p>
                }
            </div>
            <!-- Confirm Password -->
            <div class="input-group">
                <input type="password" placeholder="Confirm Password" @bind="confirmPassword" class="input-field" />
                @if (!isPasswordMatch)
                {
                    <p class="error-message">Passwords do not match.</p>
                }
            </div>
            <!-- Phone Number -->
            <div class="input-group">
                <input type="text" placeholder="Phone Number" @bind="phoneNumber" class="input-field" />
                @if (!isPhoneNumberValid)
                {
                    <p class="error-message">Phone number is required.</p>
                }
            </div>
            <!-- Birth Date (Custom Input) -->
            <div class="input-group">
                <input type="text" placeholder="Birth Date (DD/MM/YYYY)" @bind="birthDateString" class="input-field" />
                @if (!isBirthDateValid)
                {
                    <p class="error-message">Please enter a valid birth date (DD/MM/YYYY) and ensure you are at least 16.5 years old.</p>
                }
            </div>
            <!-- Address -->
            <div class="input-group">
                <input type="text" placeholder="Address" @bind="address" class="input-field" />
                @if (!isAddressValid)
                {
                    <p class="error-message">Address is required.</p>
                }
            </div>
            <!-- Role Selection -->
            <div class="input-group">
                <select @bind="role" class="input-field">
                    <option value="">Select Role</option>
                    <option value="Student">Student</option>
                    <option value="Instructor">Instructor</option>
                </select>
                @if (!isRoleValid)
                {
                    <p class="error-message">Role selection is required.</p>
                }
            </div>
            <button @onclick="HandleRegister" class="register-button animated pulse">Register</button>
        </div>
    </div>
}

<style>
    /* אנימציות */
    @@keyframes slideIn {
        from { opacity: 0; transform: translateY(50px); }
        to { opacity: 1; transform: translateY(0); }
    }
    @@keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.03); }
        100% { transform: scale(1); }
    }
    .animated {
        animation-duration: 0.8s;
        animation-fill-mode: both;
    }
    .pulse {
        animation: pulse 2s infinite;
    }
    
    /* רקע הדף – רקע נקי, מלא חלון וללא רווחים מיותרים */
    .register-background {
        background-color: #f4f4f4;
        height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        overflow: hidden;
    }
    
    /* מכולת ההרשמה – חלונית רחבה ונקייה, מותאמת לחלון */
    .register-container {
        width: 100%;
        max-width: 600px;
        background: #ffffff;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        padding: 40px 50px;
    }
    
    .register-title {
        font-size: 2.5rem;
        color: #333;
        margin-bottom: 10px;
        text-align: center;
    }
    
    .register-subtitle {
        font-size: 1.2rem;
        color: #666;
        margin-bottom: 30px;
        text-align: center;
    }
    
    /* קבוצות קלט – עיצוב נקי ומודרני */
    .input-group {
        margin-bottom: 20px;
    }
    .input-field {
        width: 100%;
        padding: 14px 16px;
        font-size: 1rem;
        border: 1px solid #ddd;
        border-radius: 8px;
        background: #fff;
        color: #333;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }
    .input-field::placeholder {
        color: #aaa;
    }
    .input-field:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 8px rgba(0, 123, 255, 0.3);
    }
    
    /* הודעות שגיאה */
    .error-message {
        color: #d9534f;
        font-size: 0.85rem;
        margin-top: 5px;
    }
    
    /* כפתור הרשמה – עיצוב מודרני עם Gradient עדין ואפקטי Hover */
    .register-button {
        width: 100%;
        padding: 15px;
        font-size: 1.1rem;
        font-weight: bold;
        color: #fff;
        background: linear-gradient(45deg, #007bff, #00c6ff);
        border: none;
        border-radius: 50px;
        cursor: pointer;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        margin-top: 20px;
    }
    .register-button:hover {
        transform: translateY(-3px);
        box-shadow: 0 8px 16px rgba(0, 123, 255, 0.3);
    }
    .register-button:active {
        transform: translateY(0);
    }
</style>

@code {
    private string firstName = "";
    private string lastName = "";
    private string email = "";
    private string password = "";
    private string confirmPassword = "";
    private string phoneNumber = "";
    private string birthDateString = "";
    private DateTime birthDate;
    private string address = "";
    private string role = "";

    private bool isFirstNameValid = true;
    private bool isLastNameValid = true;
    private bool isPhoneNumberValid = true;
    private bool isAddressValid = true;
    private bool isRoleValid = true;
    private bool isBirthDateValid = true;
    private bool isPasswordValid = true;
    private bool isPasswordMatch = true;
    private bool isEmailUnique = true;
    private bool isValidEmail = true;
    private bool shouldRender = true;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            shouldRender = false;
            await Task.Delay(100); // להבטיח שהדף נטען
            RedirectToDashboard();
        }
    }

    private void RedirectToDashboard()
    {
        try
        {
            if (AuthService.IsStudent)
            {
                Navigation.NavigateTo("/student_dashboard", true);
            }
            else if (AuthService.IsInstructor)
            {
                Navigation.NavigateTo("/teacher_dashboard", true);
            }
            else if (AuthService.IsAdmin)
            {
                Navigation.NavigateTo("/admin_dashboard", true);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Navigation error: {ex.Message}");
        }
    }

    private async Task HandleRegister()
    {
        // בדיקות בסיסיות
        isFirstNameValid = !string.IsNullOrEmpty(firstName);
        isLastNameValid = !string.IsNullOrEmpty(lastName);
        isPhoneNumberValid = !string.IsNullOrEmpty(phoneNumber);
        isAddressValid = !string.IsNullOrEmpty(address);
        isRoleValid = !string.IsNullOrEmpty(role);

        if (!isFirstNameValid || !isLastNameValid || !isPhoneNumberValid || !isAddressValid || !isRoleValid)
        {
            Console.WriteLine("All required fields must be filled.");
            return;
        }

        // המרת תאריך הלידה ובדיקת תקינות – פורמט DD/MM/yyyy
        if (!DateTime.TryParseExact(birthDateString, "dd/MM/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out birthDate))
        {
            isBirthDateValid = false;
        }
        else
        {
            isBirthDateValid = RegistrationValidator.IsBirthDateValid(birthDate);
        }

        // בדיקות מתקדמות (בהנחה שקיימות מתודות ב־RegistrationValidator)
        isPasswordValid = RegistrationValidator.IsPasswordValid(password);
        isPasswordMatch = RegistrationValidator.DoPasswordsMatch(password, confirmPassword);
        isEmailUnique = await RegistrationValidator.IsEmailUniqueAsync(email, Http);
        isValidEmail = RegistrationValidator.IsEmailValid(email);

        if (!isBirthDateValid || !isPasswordValid || !isPasswordMatch || !isEmailUnique || !isValidEmail)
        {
            Console.WriteLine("Registration validation failed.");
            return;
        }

        var response = await Http.PostAsJsonAsync("api/users/register", new
        {
            FirstName = firstName,
            LastName = lastName,
            Email = email,
            Password = password,
            PhoneNumber = phoneNumber,
            Address = address,
            BirthDate = birthDate,
            Role = role
        });

        if (response.IsSuccessStatusCode)
        {
            Navigation.NavigateTo("/login");
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"Registration failed. Status code: {response.StatusCode}. Response: {errorMessage}");
        }
    }
}

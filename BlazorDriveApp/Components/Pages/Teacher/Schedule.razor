@page "/schedule"
@using APIDrivingProject.Models
@using DrivingClassLibary.Models;
@using APIDrivingProject.Services;
@inject AuthService AuthService
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager Navigation
@rendermode InteractiveServer

<h1 style="text-align: center; margin-bottom: 1rem;">Instructor Daily Schedule</h1>

<div style="max-width: 800px; margin: 0 auto;">
    <table style="width: 100%; border-collapse: collapse; box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);">
        <thead>
            <tr style="background-color: #007bff; color: white; text-align: left;">
                <th style="padding: 10px; border-bottom: 2px solid #ddd;">Time</th>
                <th style="padding: 10px; border-bottom: 2px solid #ddd;">Student</th>
                <th style="padding: 10px; border-bottom: 2px solid #ddd;">Lesson Type</th>
                <th style="padding: 10px; border-bottom: 2px solid #ddd;">Duration</th>
                <th style="padding: 10px; border-bottom: 2px solid #ddd;">Price</th>
                <th style="padding: 10px; border-bottom: 2px solid #ddd;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @if (schedule.Any())
            {
                @foreach (var lesson in schedule)
                {
                    <tr style="background-color: #f9f9f9; text-align: left;">
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">@lesson.Date.ToString("HH:mm")</td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">@lesson.StudentName</td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">@lesson.LessonType</td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">@lesson.Duration minutes</td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">₪@lesson.Price</td>
                        <td style="padding: 10px; border-bottom: 1px solid #ddd;">
                            <button class="action-button edit-button" @onclick="() => EditLesson(lesson.LessonId)">Edit</button>
                            <button class="action-button delete-button" @onclick="() => DeleteLesson(lesson.LessonId)">Delete</button>


                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="6" style="text-align: center; padding: 20px; color: #666;">No lessons scheduled for today.</td>
                </tr>
            }
        </tbody>
    </table>
</div>
<style src="Schedule.razor.css"></style>


@code {
    private List<LessonViewModel> schedule = new();
    private LessonViewModel? selectedLesson; // For editing

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (AuthService.IsInstructor)
            {
                int instructorId = AuthService.UserId; // שליפת מזהה המורה המחובר
                DateTime today = DateTime.Today;

                // Fetch today's lessons for the instructor
                schedule = await Http.GetFromJsonAsync<List<LessonViewModel>>($"api/Instructors/{instructorId}/schedule/today");
            }
            else
            {
                Console.WriteLine("Current user is not an instructor.");
            }
        }
        catch (HttpRequestException httpEx)
        {
            Console.WriteLine($"HTTP Error: {httpEx.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading schedule: {ex.Message}");
        }
    }

    private async Task EditLesson(int lessonId)
    {
        selectedLesson = schedule.FirstOrDefault(l => l.LessonId == lessonId);
        if (selectedLesson != null)
        {
            Navigation.NavigateTo($"/edit-lesson/{lessonId}");
        }
    }

    private async Task DeleteLesson(int lessonId)
    {
        bool confirm = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Are you sure you want to delete this lesson?" });
        if (!confirm) return;

        try
        {
            await Http.DeleteAsync($"api/Lessons/{lessonId}");
            schedule = schedule.Where(l => l.LessonId != lessonId).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting lesson: {ex.Message}");
        }
    }

}

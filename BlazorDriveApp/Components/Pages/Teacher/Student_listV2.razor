@page "/student_list_v2"
@using APIDrivingProject.Services;
@using DrivingClassLibary.Models;
@inject HttpClient Http
@inject AuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<!-- כותרת ראשית -->
<div class="header-card">
    <div class="header-text">
        <h2>רשימת תלמידים</h2>
        <p>נהל ועקוב אחרי התלמידים שלך</p>
    </div>
</div>

<!-- שורת חיפוש -->
<div class="search-container">
    <input type="text" placeholder="חפש לפי שם..." @oninput="(e) => PerformSearch(e.Value?.ToString())" />
    <button @onclick="SearchStudents">
        <i class="fas fa-search"></i> חיפוש
    </button>
</div>

<!-- טבלת תלמידים -->
<table class="styled-table">
    <thead>
        <tr>
            <th>שם</th>
            <th>דוא"ל</th>
            <th>טלפון</th>
            <th>שיעורים</th>
            <th>סטטוס</th>
            <th>פעולות</th>
        </tr>
    </thead>
    <tbody>
        @if (filteredStudents != null && filteredStudents.Any())
        {
            @foreach (var student in filteredStudents)
            {
                <tr>
                    <td>@student.FirstName @student.LastName</td>
                    <td>@student.Email</td>
                    <td>@student.PhoneNumber</td>
                    <td class="center">@student.LessonsTaken</td>
                    <td>
                        <span class="status @(student.IsActive ? "active" : "inactive")">
                            <i class="@(student.IsActive ? "fas fa-check-circle" : "fas fa-times-circle")"></i>
                            @(student.IsActive ? "פעיל" : "לא פעיל")
                        </span>
                    </td>
                    <td class="center">
                        <button class="btn-edit" @onclick="() => EditStudent(student.PersonId)">
                            <i class="fas fa-edit"></i> עריכה
                        </button>
                        <button class="btn-deactivate" @onclick="() => DeactivateStudent(student.PersonId)">
                            <i class="fas fa-ban"></i> נטרול
                        </button>
                        <button class="btn-progress" @onclick="() => ViewProgress(student.PersonId)">
                            <i class="fas fa-chart-line"></i> התקדמות
                        </button>
                        <button class="btn-add" @onclick="() => AddLesson(student.PersonId, student.FirstName + ' ' + student.LastName)">
                            <i class="fas fa-plus"></i> הוספת שיעור
                        </button>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6" class="no-results">לא נמצאו תלמידים.</td>
            </tr>
        }
    </tbody>
</table>
<style>
/* הגדרות כלליות */
body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}

/* כותרת ראשית */
.header-card {
    background: linear-gradient(90deg, #3f51b5, #5c6bc0);
    padding: 20px;
    border-radius: 10px;
    margin-bottom: 20px;
    display: flex;
    justify-content: center;
    align-items: center;
    animation: fadeIn 1s ease-in-out;
}
.header-text h2 {
    margin: 0;
    font-size: 1.8rem;
    color: #fff;
}
.header-text p {
    margin: 0;
    font-size: 1rem;
    color: #e0e0e0;
}

/* שורת חיפוש */
.search-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 20px;
    animation: fadeIn 1s ease;
}
.search-container input[type="text"] {
    padding: 10px;
    width: 40%;
    border: 1px solid #ccc;
    border-radius: 5px;
    transition: border-color 0.3s ease;
}
.search-container input[type="text"]:focus {
    border-color: #3f51b5;
    outline: none;
}
.search-container button {
    background: linear-gradient(45deg, #3f51b5, #5c6bc0);
    color: #fff;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 1rem;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}
.search-container button:hover {
    transform: scale(1.05);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
}

/* טבלה */
.styled-table {
    width: 100%;
    border-collapse: collapse;
    background-color: #fff;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    animation: fadeIn 1s ease;
}
.styled-table th, .styled-table td {
    padding: 15px;
    text-align: left;
}
.styled-table th {
    background-color: #3f51b5;
    color: #fff;
    font-size: 1.1rem;
}
.styled-table tr {
    border-bottom: 1px solid #f0f0f0;
    transition: background-color 0.3s ease;
}
.styled-table tr:hover {
    background-color: #f9f9f9;
}
.center { text-align: center; }
.no-results { padding: 20px; text-align: center; color: #999; }

/* סטיילינג עבור סטטוס תלמיד */
.status {
    font-weight: bold;
}
.status.active {
    color: #4CAF50;
}
.status.inactive {
    color: #F44336;
}
.status i {
    margin-right: 5px;
}

/* כפתורי פעולה */
.btn-edit, .btn-deactivate, .btn-progress, .btn-add {
    padding: 10px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    margin-right: 5px;
    font-size: 0.9rem;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
}
.btn-edit {
    background-color: #2196F3;
    color: #fff;
}
.btn-deactivate {
    background-color: #F44336;
    color: #fff;
}
.btn-progress {
    background-color: #4CAF50;
    color: #fff;
}
.btn-add {
    background-color: #FF9800;
    color: #fff;
}
.btn-edit:hover, .btn-deactivate:hover, .btn-progress:hover, .btn-add:hover {
    transform: scale(1.05);
    box-shadow: 0 5px 10px rgba(0,0,0,0.15);
}


/* אנימציית fadeIn */
@@keyframes fadeIn {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
}
</style>

@code {
    private List<Student> students = new();
    private List<Student> filteredStudents = new();
    private string searchTerm = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var instructorId = AuthService.UserId;
            students = await Http.GetFromJsonAsync<List<Student>>($"api/Instructors/{instructorId}/students");
            filteredStudents = students;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading students: {ex.Message}");
        }
    }

    private void PerformSearch(string? input)
    {
        searchTerm = input ?? string.Empty;
        SearchStudents();
    }

    private void SearchStudents()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredStudents = students;
        }
        else
        {
            filteredStudents = students.Where(s =>
                (s.FirstName + " " + s.LastName).Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        StateHasChanged(); // רענון הממשק
    }

    private void EditStudent(int studentId)
    {
        Navigation.NavigateTo($"/edit_student/{studentId}");
    }

    private void DeactivateStudent(int studentId)
    {
        Console.WriteLine($"Deactivate student with ID: {studentId}");
    }

    private void ViewProgress(int studentId)
    {
        Navigation.NavigateTo($"/progress_student/{studentId}");
    }

    private void AddLesson(int studentId, string studentName)
    {
        Navigation.NavigateTo($"/add_lesson/{studentId}?name={Uri.EscapeDataString(studentName)}");
    }
}

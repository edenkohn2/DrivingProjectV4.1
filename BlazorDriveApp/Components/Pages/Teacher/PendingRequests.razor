@page "/pending-requests"
@using DrivingClassLibary.Models
@using APIDrivingProject.Services;
@inject HttpClient Http
@inject AuthService AuthService
@rendermode InteractiveServer

<h1 style="text-align: center;">Pending Requests</h1>

@if (requests == null || !requests.Any())
{
    <p>No pending requests found.</p>
}
else
{
    <table style="width: 100%; border-collapse: collapse; margin: 20px auto; max-width: 600px;">
        <thead>
            <tr style="background-color: #f2f2f2;">
                <th style="padding: 10px; text-align: left;">Student Name</th>
                <th style="padding: 10px; text-align: left;">Email</th>
                <th style="padding: 10px; text-align: left;">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var request in requests)
            {
                <tr>
                    <td style="padding: 10px;">@request.FirstName @request.LastName</td>
                    <td style="padding: 10px;">@request.Email</td>
                    <td style="padding: 10px;">
                        <button @onclick="() => ApproveRequest(request.PendingId)" style="padding: 5px 10px;">Approve</button>
                        <button @onclick="() => RejectRequest(request.PendingId)" style="padding: 5px 10px; margin-left: 10px;">Reject</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<PendingRequestModel> requests = new();
    private int instructorId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get instructor ID from AuthService
            instructorId = AuthService.UserId;

            // Load pending requests
            requests = await Http.GetFromJsonAsync<List<PendingRequestModel>>($"api/Instructors/{instructorId}/pending-requests");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading requests: {ex.Message}");
        }
    }

    private async Task ApproveRequest(int pendingId)
    {
        try
        {
            var response = await Http.PostAsync($"api/Instructors/{instructorId}/approve-request/{pendingId}", null);

            if (response.IsSuccessStatusCode)
            {
                requests.RemoveAll(r => r.PendingId == pendingId);
            }
            else
            {
                Console.WriteLine($"Error approving request: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error approving request: {ex.Message}");
        }
    }

    private async Task RejectRequest(int pendingId)
    {
        try
        {
            var response = await Http.DeleteAsync($"api/Instructors/{instructorId}/reject-request/{pendingId}");

            if (response.IsSuccessStatusCode)
            {
                requests.RemoveAll(r => r.PendingId == pendingId);
            }
            else
            {
                Console.WriteLine($"Error rejecting request: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error rejecting request: {ex.Message}");
        }
    }
}
